
_DoCheckButtons 				;fa56
		#bbrf INPUT_BIT, pressFlag, DoChkBtns1
		#rmbf INPUT_BIT, pressFlag
		LDA inputVector
		LDX inputVector+1
		JSR CallRoutine
DoChkBtns1	#bbrf MOUSE_BIT, pressFlag, DoChkBtns2	;fa69
		#rmbf MOUSE_BIT, pressFlag
		LDA mouseVector
		LDX mouseVector+1
		JSR CallRoutine
DoChkBtns2	#bbrf KEYPRESS_BIT, pressFlag, DoChkBtns3	;fa7e
		JSR KbdScanHelp3
		LDA keyVector
		LDX keyVector+1
		JSR CallRoutine
DoChkBtns3	LDA faultData			;fa8e
		BEQ DoChkBtns4
		LDA mouseFaultVec
		LDX mouseFaultVec+1
		JSR CallRoutine
		LDA #NULL
		STA faultData
DoChkBtns4	RTS				;faa1

_IRQHandler	CLD				;faa2
		STA tempIRQAcc
		PLA
		PHA
		AND #%00010000
		BEQ IRQHand1
		PLA
		JMP (BRKVector)
IRQHand1	TXA				;fab0
		PHA
		TYA
		PHA
		#PushW CallRLo
		#PushW returnAddress
		LDX #0
IRQHand2	LDA r0,x			;fac2
		PHA
		INX
		CPX #32
		BNE IRQHand2
		#PushB CPU_DATA
		#LoadB CPU_DATA, $35
		LDA dblClickCount
		BEQ IRQHand3
		DEC dblClickCount
IRQHand3	LDY KbdQueFlag			;fad9
		BEQ IRQHand4
		INY
		BEQ IRQHand4
		DEC KbdQueFlag
IRQHand4	JSR _DoKeyboardScan		;fae4
		LDA alarmWarnFlag
		BEQ IRQHand5
		DEC alarmWarnFlag
IRQHand5	LDA intTopVector		;faef
		LDX intTopVector+1
		JSR CallRoutine
		LDA intBotVector
		LDX intBotVector+1
		JSR CallRoutine
		#LoadB grirq, 1
		#PopB CPU_DATA
		LDX #31
IRQHand6	PLA				;fb0b
		STA r0,x
		DEX
		BPL IRQHand6
		#PopW returnAddress
		#PopW CallRLo
		PLA
		TAY
		PLA
		TAX
		LDA tempIRQAcc
_NMIHandler	RTI				;fb24

_DoKeyboardScan 				;fb25
		LDA KbdQueFlag
		BNE DoKbdScan1
		LDA KbdNextKey
		JSR KbdScanHelp2
		#LoadB KbdQueFlag, 15
DoKbdScan1	#LoadB r1H, 0			;fb35
		JSR KbdScanRow
		BNE DoKbdScan5
		JSR KbdScanHelp5
		LDY #7
DoKbdScan2	JSR KbdScanRow			;fb43
		BNE DoKbdScan5
		LDA KbdTestTab,y
		STA cia1base+0
		LDA cia1base+1
		CMP KbdDBncTab,y
		STA KbdDBncTab,y
		BNE DoKbdScan4
		CMP KbdDMltTab,y
		BEQ DoKbdScan4
		PHA
		EOR KbdDMltTab,y
		BEQ DoKbdScan3
		JSR KbdScanHelp1
DoKbdScan3	PLA				;fb67
		STA KbdDMltTab,y
DoKbdScan4	DEY				;fb6b
		BPL DoKbdScan2
DoKbdScan5	RTS				;fb6e

KbdScanRow	#LoadB cia1base+0, $ff		;fb6f
		#CmpBI cia1base+1, $ff
		RTS

KbdScanHelp1	STA r0L 			;fb7a
		#LoadB r1L, 7
KbdScanHlp_10	LDA r0L 			;fb80
		LDX r1L
		AND BitMask2,x
		BEQ KbdScanHlp_19
		TYA
		ASL A
		ASL A
		ASL A
		ADC r1L
		TAX
		#bbrf 7, r1H, KbdScanHlp_11
		LDA KbdDecodeTab2,x
		#bra KbdScanHlp_12
KbdScanHlp_11	LDA KbdDecodeTab1,x		;fb9a
KbdScanHlp_12	STA r0H 			;fb9d
		#bbrf 5, r1H, KbdScanHlp_13
		LDA r0H
		JSR KbdScanHelp6
		CMP #"A"
		BCC KbdScanHlp_13
		CMP #"Z"+1
		BCS KbdScanHlp_13
		#subv $40
		STA r0H
KbdScanHlp_13	#bbrf 6, r1H, KbdScanHlp_14	;fbb7
		#smbf 7, r0H
KbdScanHlp_14	LDA r0H 			;fbc1
		STY r0H
		LDY #8
KbdScanHlp_15	CMP KbdTab1,y			;fbc7
		BEQ KbdScanHlp_16
		DEY
		BPL KbdScanHlp_15
		BMI KbdScanHlp_17
KbdScanHlp_16	LDA KbdTab2,y			;fbd1
KbdScanHlp_17	LDY r0H 			;fbd4
		STA r0H
		AND #%01111111
		CMP #%00011111
		BEQ KbdScanHlp_18
		LDX r1L
		LDA r0L
		AND BitMask2,x
		AND KbdDMltTab,y
		BEQ KbdScanHlp_18
		#LoadB KbdQueFlag, 15
		#MoveB r0H, KbdNextKey
		JSR KbdScanHelp2
		#bra KbdScanHlp_19
KbdScanHlp_18	#LoadB KbdQueFlag, $ff		;fbfa
		#LoadB KbdNextKey, 0
KbdScanHlp_19	DEC r1L 			;fc04
		BMI KbdScanHlp_1a
		JMP KbdScanHlp_10
KbdScanHlp_1a	RTS				;fc0b

KbdTab1 					;fc0c
		.byte $db, $dd, $de, $ad, $af, $aa, $c0, $ba, $bb
KbdTab2 					;fc15
		.byte $7b, $7d, $7c, $5f, $5c, $7e, $60, $7b, $7d
						;fc1e
KbdTestTab	.byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f

KbdDecodeTab1					;fc26
	.byte KEY_DELETE, CR, KEY_RIGHT, KEY_F7, KEY_F1, KEY_F3, KEY_F5, KEY_DOWN
		.byte "3", "w", "a", "4", "z", "s", "e", KEY_INVALID
		.byte "5", "r", "d", "6", "c", "f", "t", "x"
		.byte "7", "y", "g", "8", "b", "h", "u", "v"
		.byte "9", "i", "j", "0", "m", "k", "o", "n"
		.byte "+", "p", "l", "-", ".", ":", "@", ","
		.byte KEY_BPS, "*", ";", KEY_HOME, KEY_INVALID, "=", "^", "/"
		.byte "1", KEY_LARROW, KEY_INVALID, "2", " ", KEY_INVALID, "q", KEY_STOP
KbdDecodeTab2					;fc66
	.byte KEY_INSERT, CR, BACKSPACE, KEY_F8, KEY_F2, KEY_F4, KEY_F6, KEY_UP
		.byte "#", "W", "A", "$", "Z", "S", "E", KEY_INVALID
		.byte "%", "R", "D", "&", "C", "F", "T", "X"
		.byte "'", "Y", "G", "(", "B", "H", "U", "V"
		.byte ")", "I", "J", "0", "M", "K", "O", "N"
		.byte "+", "P", "L", "-", ">", "[", "@", "<"
		.byte KEY_BPS, "*", "]", KEY_CLEAR, KEY_INVALID, "=", "^", "?"
		.byte "!", KEY_LARROW, KEY_INVALID, $22, " ", KEY_INVALID, "Q", KEY_RUN

KbdScanHelp2	PHP				;fca6
		SEI
		PHA
		#smbf KEYPRESS_BIT, pressFlag
		LDX KbdQueTail
		PLA
		STA KbdQueue,x
		JSR KbdScanHelp4
		CPX KbdQueHead
		BEQ KbdScanHlp_21
		STX KbdQueTail
KbdScanHlp_21	PLP				;fcc1
		RTS

KbdScanHelp3	PHP				;fcc3
		SEI
		LDX KbdQueHead
		LDA KbdQueue,x
		STA keyData
		JSR KbdScanHelp4
		STX KbdQueHead
		CPX KbdQueTail
		BNE KbdScanHlp_31
		#rmb KEYPRESS_BIT, pressFlag
KbdScanHlp_31	PLP				;fce1
		RTS

KbdScanHelp4	INX				;fce3
		CPX #16
		BNE KbdScanHlp_41
		LDX #0
KbdScanHlp_41	RTS				;fcea

_GetNextChar					;fceb
		#bbrf KEYPRESS_BIT, pressFlag, GetNxtChar1
		JMP KbdScanHelp3
GetNxtChar1	LDA #0				;fcf2
		RTS


KbdScanHelp5	#LoadB cia1base+0, %11111101	;fcf5
		LDA cia1base+1
		EOR #$ff
		AND #%10000000
		BNE KbdScanHlp_51
		#LoadB cia1base+0, %10111111
		LDA cia1base+1
		EOR #$ff
		AND #%00010000
		BEQ KbdScanHlp_52
KbdScanHlp_51	#smbf 7, r1H			;fd11
KbdScanHlp_52	#LoadB cia1base+0, %01111111	;fd17
		LDA cia1base+1
		EOR #$ff
		AND #%00100000
		BEQ KbdScanHlp_53
		#smbf 6, r1H
KbdScanHlp_53	#LoadB cia1base+0, %01111111	;fd2b
		LDA cia1base+1
		EOR #$ff
		AND #%00000100
		BEQ KbdScanHlp_54
		#smbf 5, r1H
KbdScanHlp_54	RTS				;fd3f

KbdScanHelp6	PHA				;fd40
		AND #%01111111
		CMP #"a"
		BCC KbdScanHlp_61
		CMP #"z"+1
		BCS KbdScanHlp_61
		PLA
		#subv $20
		PHA
KbdScanHlp_61	PLA				;fd50
		RTS

_DoUpdateTime					;fd52
		SEI
		LDX CPU_DATA
		#LoadB CPU_DATA, $35
		LDA cia1base+15
		AND #%01111111
		STA cia1base+15
		LDA hour
		CMP #12
		BMI DoUpdTime1
		#bbsf 7, cia1base+11, DoUpdTime1
		JSR DateUpdate
DoUpdTime1	LDA cia1base+11 		;fd70
		AND #%00011111
		CMP #$12
		BNE DoUpdTime2
		LDA #0
DoUpdTime2	#bbrf 7, cia1base+11, DoUpdTime3	;fd7b
		SED
		#addv $12
		CLD
DoUpdTime3	JSR ConvertBCD			;fd85
		STA hour
		LDA cia1base+10
		JSR ConvertBCD
		STA minutes
		LDA cia1base+9
		JSR ConvertBCD
		STA seconds
		LDA cia1base+8
		LDY #2
DoUpdTime4	LDA year,y			;fda2
		STA dateCopy,y
		DEY
		BPL DoUpdTime4
		#MoveB cia1base+13, r1L
		STX CPU_DATA
		#bbrf 7, alarmSetFlag, DoUpdTime5
		AND #ALARMMASK
		BEQ DoUpdTime6
		LDA #$4a
		STA alarmSetFlag
		LDA alarmTmtVector
		ORA alarmTmtVector+1
		BEQ DoUpdTime5
		JMP (alarmTmtVector)
DoUpdTime5	#bbrf 6, alarmSetFlag, DoUpdTime6	;fdcb
		JSR DoClockAlarm
DoUpdTime6	CLI				;fdd3
		RTS

DateUpdate	JSR CheckMonth			;fdd5
		CMP day
		BEQ DateUpd1
		INC day
		RTS
DateUpd1	LDY #1				;fde1
		STY day
		INC month
		LDA month
		CMP #13
		BNE DateUpd2
		STY month
		INC year
		LDA year
		CMP #100
		BNE DateUpd2
		DEY
		STY year
DateUpd2	RTS				;fe01

CheckMonth	LDY month			;fe02
		LDA daysTab-1, y
		CPY #2
		BNE CheckMonth2
		TAY
		LDA year
		AND #3
		BNE CheckMonth1
		INY
CheckMonth1	TYA				;fe15
CheckMonth2	RTS				;fe16

daysTab 					;fe17
		.byte 31, 28, 31, 30, 31, 30
		.byte 31, 31, 30, 31, 30, 31

ConvertBCD	PHA				;fe23
		AND #%11110000
		LSR A
		LSR A
		LSR A
		LSR A
		TAY
		PLA
		AND #%00001111
		CLC
CvtBCD1 	DEY				;fe2f
		BMI CvtBCD2
		ADC #10
		BNE CvtBCD1
CvtBCD2 	RTS				;fe36

DoClockAlarm	LDA alarmWarnFlag		;fe37
		BNE DoClkAlrm3
		LDY CPU_DATA
		#LoadB CPU_DATA, $35
		LDX #24
DoClkAlrm1	LDA pingTab,x			;fe44
		STA sidbase,x
		DEX
		BPL DoClkAlrm1
		LDX #$21
		LDA alarmSetFlag
		AND #%00111111
		BNE DoClkAlrm2
		TAX
DoClkAlrm2	STX sidbase+4			;fe57
		STY CPU_DATA
		LDA #$1e
		STA alarmWarnFlag
		DEC alarmSetFlag
DoClkAlrm3	RTS				;fe64

pingTab 					;fe65
		.byte $00, $10, $00, $08, $40, $08, $00, $00
		.byte $00, $00, $00, $00, $00, $00, $00, $00
		.byte $00, $00, $00, $00, $00, $00, $00, $00
		.byte $0f, $00, $0f

;fe80 - MOUSE_JMP
;	INPUT_DRIVER
;
;fffa - vector: RESET : _NMIHandler
;	vector: NMI   : _NMIHandler
;	vector: IRQ   : _IRQHandler

